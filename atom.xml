<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花椒茴香的个人博客</title>
  
  <subtitle>安得广厦千万间</subtitle>
  <link href="http://huajiaohuixiang.github.io/atom.xml" rel="self"/>
  
  <link href="http://huajiaohuixiang.github.io/"/>
  <updated>2021-02-25T09:15:57.467Z</updated>
  <id>http://huajiaohuixiang.github.io/</id>
  
  <author>
    <name>huajiaohuixiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Synchronize</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/25/Synchronize/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/25/Synchronize/</id>
    <published>2021-02-25T08:53:35.000Z</published>
    <updated>2021-02-25T09:15:57.467Z</updated>
    
    <content type="html"><![CDATA[<p>Synchronized的用法<br><a href="https://blog.csdn.net/luoweifu/article/details/46613015">https://blog.csdn.net/luoweifu/article/details/46613015</a></p><p>额外：<br>同步与互斥的区别：<a href="https://www.cnblogs.com/baizhanshi/p/6844356.html">https://www.cnblogs.com/baizhanshi/p/6844356.html</a></p><p>进程线程基础<br><a href="https://blog.csdn.net/luoweifu/article/details/46595285">https://blog.csdn.net/luoweifu/article/details/46595285</a><br>java中的 多线程<a href="https://blog.csdn.net/luoweifu/article/details/46673975">https://blog.csdn.net/luoweifu/article/details/46673975</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Synchronized的用法&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/luoweifu/article/details/46613015&quot;&gt;https://blog.csdn.net/luoweifu/article/details/46613</summary>
      
    
    
    
    
    <category term="Java" scheme="http://huajiaohuixiang.github.io/tags/Java/"/>
    
    <category term="操作系统" scheme="http://huajiaohuixiang.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Redis、Mysql</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/23/%E5%AE%89%E8%A3%85Redis%EF%BC%8CMysql/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/23/%E5%AE%89%E8%A3%85Redis%EF%BC%8CMysql/</id>
    <published>2021-02-23T09:06:01.000Z</published>
    <updated>2021-02-23T14:40:35.719Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux-Ubuntu18-01安装redis和Mysql"><a href="#Linux-Ubuntu18-01安装redis和Mysql" class="headerlink" title="Linux Ubuntu18.01安装redis和Mysql"></a>Linux Ubuntu18.01安装redis和Mysql</h3><h4 id="1-安装redis"><a href="#1-安装redis" class="headerlink" title="1.安装redis"></a>1.安装redis</h4><p>​    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><h4 id="2-启动redis"><a href="#2-启动redis" class="headerlink" title="2.启动redis"></a>2.启动redis</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><h4 id="3-让其他电脑可以访问"><a href="#3-让其他电脑可以访问" class="headerlink" title="3.让其他电脑可以访问"></a>3.让其他电脑可以访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -S redis_server 显示包含此软件包的所有位置，</span><br></pre></td></tr></table></figure><p>有一个/etc/redis/redis.conf  文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/redis/redis.conf  <span class="comment">//打开</span></span><br></pre></td></tr></table></figure><p>关闭保护模式并将127.0.0.1换成0.0.0.0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1 ::1     换成 bind 0.0.0.0 ::1</span><br><span class="line">protected-mode yes     换成 protected-mode no</span><br></pre></td></tr></table></figure><p>保存退出重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart redis-server</span><br></pre></td></tr></table></figure><h4 id="1-安装Mysql"><a href="#1-安装Mysql" class="headerlink" title="1.安装Mysql"></a>1.安装Mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br><span class="line">sudo systemctl status mysql  //安装完成后输入这个看看状态</span><br></pre></td></tr></table></figure><h4 id="2-然后可以根据阿里云的这个增加一下数据库安全"><a href="#2-然后可以根据阿里云的这个增加一下数据库安全" class="headerlink" title="2.然后可以根据阿里云的这个增加一下数据库安全"></a>2.然后可以根据阿里云的这个增加一下数据库安全</h4><p><a href="https://yq.aliyun.com/articles/758177">https://yq.aliyun.com/articles/758177</a></p><h4 id="3-配置外网访问"><a href="#3-配置外网访问" class="headerlink" title="3.配置外网访问"></a>3.配置外网访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/mysql</span><br><span class="line"></span><br><span class="line">//然后ls一下 我的有下面这些东西，配置文件在mysql.conf.d中</span><br><span class="line">//conf.d      debian-start  my.cnf.fallback  mysql.conf.d</span><br><span class="line">//debian.cnf  my.cnf        mysql.cnf</span><br><span class="line"></span><br><span class="line">cd mysql.conf.d</span><br><span class="line">vim mysqld.cnf</span><br><span class="line">     //将地址127.0.0.1 改成0.0.0.0</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Linux-Ubuntu18-01安装redis和Mysql&quot;&gt;&lt;a href=&quot;#Linux-Ubuntu18-01安装redis和Mysql&quot; class=&quot;headerlink&quot; title=&quot;Linux Ubuntu18.01安装redis和Mysql&quot;&gt;</summary>
      
    
    
    
    
    <category term="Ubuntu" scheme="http://huajiaohuixiang.github.io/tags/Ubuntu/"/>
    
    <category term="Redis" scheme="http://huajiaohuixiang.github.io/tags/Redis/"/>
    
    <category term="Mysql" scheme="http://huajiaohuixiang.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>HashTable</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/23/HashTable/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/23/HashTable/</id>
    <published>2021-02-23T09:06:01.000Z</published>
    <updated>2021-02-23T14:41:22.281Z</updated>
    
    
    
    
    
    <category term="Java" scheme="http://huajiaohuixiang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>拦截器</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/23/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/23/%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2021-02-23T09:06:01.000Z</published>
    <updated>2021-02-23T14:40:41.641Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot配置拦截器"><a href="#SpringBoot配置拦截器" class="headerlink" title="SpringBoot配置拦截器"></a>SpringBoot配置拦截器</h3><h4 id="1-实现一个拦截器"><a href="#1-实现一个拦截器" class="headerlink" title="1.实现一个拦截器"></a>1.实现一个拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">实现HandlerInterceptor</span><br><span class="line">重写preHandle方法，postHandler，afterCompletion方法</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//这里就可以根据request判断token session等等。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进入拦截器啦！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bye!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了TestInterceptor的afterCompletion方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.将拦截器配置到SpringBoot程序中，在Spring中，使用XML的方式，而在Boot中只需要定义一个带有@Configuration的配置类即可，需要实现WebMvcConfigure接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testMvcConfigure</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        InterceptorRegistration registration = registry.addInterceptor(<span class="keyword">new</span> testInterceptor());</span><br><span class="line">        registration.addPathPatterns(<span class="string">&quot;/**&quot;</span>);                      <span class="comment">//所有路径都被拦截</span></span><br><span class="line">        registration.excludePathPatterns(                         <span class="comment">//添加不拦截路径</span></span><br><span class="line">                <span class="string">&quot;/vip/wang&quot;</span>          </span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SpringBoot配置拦截器&quot;&gt;&lt;a href=&quot;#SpringBoot配置拦截器&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot配置拦截器&quot;&gt;&lt;/a&gt;SpringBoot配置拦截器&lt;/h3&gt;&lt;h4 id=&quot;1-实现一个拦截器&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="http://huajiaohuixiang.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer38</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/23/%E5%89%91%E6%8C%87offer38/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/23/%E5%89%91%E6%8C%87offer38/</id>
    <published>2021-02-23T02:40:18.000Z</published>
    <updated>2021-02-23T05:37:18.152Z</updated>
    
    <content type="html"><![CDATA[<p>输入一个字符串，打印出该字符串中字符的所有排列。<br>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p><p>示例:</p><p>输入：s = “abc”<br>输出：[“abc”,”acb”,”bac”,”bca”,”cab”,”cba”]</p><p>一开始的做法，回溯法模拟了一遍全排列；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; used;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">permutation</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; tempResult;<span class="comment">//因为字符串中可能有重复的元素，所以用了它去重</span></span><br><span class="line">        <span class="built_in">string</span> temp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c:s)&#123;used.push_back(<span class="literal">false</span>);&#125;</span><br><span class="line">        huiSu(tempResult,s,temp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c:tempResult)&#123;</span><br><span class="line">            result.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">huiSu</span><span class="params">(<span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt;&amp; result,<span class="built_in">string</span>&amp; s,<span class="built_in">string</span>&amp; temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.length()==s.length())&#123;</span><br><span class="line">            result.insert(temp);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s.length();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(used[j])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;     </span><br><span class="line">            temp.push_back(s[j]);</span><br><span class="line">            used[j]=<span class="literal">true</span>;</span><br><span class="line">            huiSu(result,s,temp);</span><br><span class="line">            used[j]=<span class="literal">false</span>;</span><br><span class="line">            temp.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于有重复元素的情况，我使用了set集合先把所有的结果加进去，然后再返回到vector中</p><p>还可以先将字符串排序，排序后相同的元素在一起，然后把他们看成一个即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;res;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="built_in">string</span> s,<span class="built_in">string</span>&amp; temp,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.size()==s.size())</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=<span class="number">1</span>&amp;&amp;s[i<span class="number">-1</span>]==s[i]&amp;&amp;!used[i<span class="number">-1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                temp.push_back(s[i]);</span><br><span class="line">                used[i]=<span class="literal">true</span>;</span><br><span class="line">                backtrack(s,temp,used);</span><br><span class="line">                used[i]=<span class="literal">false</span>;</span><br><span class="line">                temp.pop_back();</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">permutation</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.size()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>&#123;&#125;;</span><br><span class="line">        <span class="built_in">string</span> temp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        sort(s.begin(),s.end());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;used(s.size());</span><br><span class="line">        backtrack(s,temp,used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>进行通过字符交换来实现全排列,然后使用unordered_set去重（这个去重与上面的作用完全不一样），如果某个已经交换过了，就不用在交换了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">permutation</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        dfs(s, res, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;res, <span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth &gt;= s.size()<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(s);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; used;  <span class="comment">//局部set去重</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = depth; i &lt; s.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(used.find(s[i]) != used.end())   <span class="keyword">continue</span>;   <span class="comment">//去重</span></span><br><span class="line">            used.insert(s[i]);</span><br><span class="line">            swap(s[depth],s[i]);</span><br><span class="line">            dfs(s, res, depth+<span class="number">1</span>);</span><br><span class="line">            swap(s[depth],s[i]);        <span class="comment">//回溯撤销操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：zrita</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/solution/chui-su-z-by-zrita-gvc0/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;输入一个字符串，打印出该字符串中字符的所有排列。&lt;br&gt;你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入：s = “abc”&lt;br&gt;输出：[“abc”,”acb”,”bac”,”bca”,”cab”,”cba”]&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://huajiaohuixiang.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Lambda</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/22/Lambda/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/22/Lambda/</id>
    <published>2021-02-22T09:07:05.000Z</published>
    <updated>2021-02-22T09:07:05.357Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>maven</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/22/maven/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/22/maven/</id>
    <published>2021-02-22T09:06:43.000Z</published>
    <updated>2021-02-22T09:06:43.134Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-02-22T09:06:26.000Z</published>
    <updated>2021-02-22T09:06:26.887Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>单元测试</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/22/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/22/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2021-02-22T09:06:17.000Z</published>
    <updated>2021-02-22T09:06:17.250Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>IO</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/22/IO/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/22/IO/</id>
    <published>2021-02-22T09:06:06.000Z</published>
    <updated>2021-02-22T09:06:06.746Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/22/%E9%9B%86%E5%90%88/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/22/%E9%9B%86%E5%90%88/</id>
    <published>2021-02-22T09:06:01.000Z</published>
    <updated>2021-02-22T09:06:01.078Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>泛型</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/22/%E6%B3%9B%E5%9E%8B/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/22/%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-02-22T09:05:49.000Z</published>
    <updated>2021-02-22T09:05:49.303Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>注解</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/22/%E6%B3%A8%E8%A7%A3/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/22/%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-02-22T09:05:23.000Z</published>
    <updated>2021-02-22T09:05:23.669Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/22/%E5%8F%8D%E5%B0%84/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/22/%E5%8F%8D%E5%B0%84/</id>
    <published>2021-02-22T07:17:40.000Z</published>
    <updated>2021-02-22T10:29:13.516Z</updated>
    
    <content type="html"><![CDATA[<p>重点的几个类 Class ，Field ，Method ，Constructor，</p><p>动态代理实现接口</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;重点的几个类 Class ，Field ，Method ，Constructor，&lt;/p&gt;
&lt;p&gt;动态代理实现接口&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Java" scheme="http://huajiaohuixiang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>异常错误</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/22/%E5%BC%82%E5%B8%B8/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/22/%E5%BC%82%E5%B8%B8/</id>
    <published>2021-02-22T06:09:06.000Z</published>
    <updated>2021-02-22T07:23:05.057Z</updated>
    
    <content type="html"><![CDATA[<p>p</p><h4 id="1-异常和错误都是类，基类Throwable-只实现了序列化接口。"><a href="#1-异常和错误都是类，基类Throwable-只实现了序列化接口。" class="headerlink" title="1.异常和错误都是类，基类Throwable 只实现了序列化接口。"></a>1.异常和错误都是类，基类Throwable 只实现了序列化接口。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Throwable</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.printStackTrace()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    printStackTrace(System.err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(PrintStream s)</span> </span>&#123;</span><br><span class="line">    printStackTrace(<span class="keyword">new</span> WrappedPrintStream(s));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(PrintStreamOrWriter s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Guard against malicious overrides of Throwable.equals by</span></span><br><span class="line">    <span class="comment">// using a Set with identity equality semantics.</span></span><br><span class="line">    Set&lt;Throwable&gt; dejaVu = Collections.newSetFromMap(<span class="keyword">new</span> IdentityHashMap&lt;&gt;());</span><br><span class="line">    dejaVu.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (s.lock()) &#123;</span><br><span class="line">        <span class="comment">// Print our stack trace</span></span><br><span class="line">        s.println(<span class="keyword">this</span>);</span><br><span class="line">        StackTraceElement[] trace = getOurStackTrace();</span><br><span class="line">        <span class="keyword">for</span> (StackTraceElement traceElement : trace)</span><br><span class="line">            s.println(<span class="string">&quot;\tat &quot;</span> + traceElement);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print suppressed exceptions, if any</span></span><br><span class="line">        <span class="keyword">for</span> (Throwable se : getSuppressed())</span><br><span class="line">            se.printEnclosedStackTrace(s, trace, SUPPRESSED_CAPTION, <span class="string">&quot;\t&quot;</span>, dejaVu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print cause, if any</span></span><br><span class="line">        Throwable ourCause = getCause();</span><br><span class="line">        <span class="keyword">if</span> (ourCause != <span class="keyword">null</span>)</span><br><span class="line">            ourCause.printEnclosedStackTrace(s, trace, CAUSE_CAPTION, <span class="string">&quot;&quot;</span>, dejaVu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-捕获异常-都很熟悉"><a href="#3-捕获异常-都很熟悉" class="headerlink" title="3.捕获异常  (都很熟悉)"></a>3.捕获异常  (都很熟悉)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e1)&#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e2)&#123;</span><br><span class="line">e2.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-抛出异常"><a href="#4-抛出异常" class="headerlink" title="4.抛出异常"></a>4.抛出异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用throw + 异常对象</span></span><br><span class="line">Exception exception2=<span class="keyword">new</span> Exception();</span><br><span class="line"><span class="keyword">throw</span> exception2;</span><br><span class="line"></span><br><span class="line">或者<span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br></pre></td></tr></table></figure><h4 id="5-Java异常体系"><a href="#5-Java异常体系" class="headerlink" title="5.Java异常体系"></a>5.Java异常体系</h4><p>Java标准库定义的常用异常包括：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Exception</span><br><span class="line">│</span><br><span class="line">├─ RuntimeException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ NullPointerException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ IndexOutOfBoundsException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ SecurityException</span><br><span class="line">│  │</span><br><span class="line">│  └─ IllegalArgumentException</span><br><span class="line">│     │</span><br><span class="line">│     └─ NumberFormatException</span><br><span class="line">│</span><br><span class="line">├─ IOException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ UnsupportedCharsetException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ FileNotFoundException</span><br><span class="line">│  │</span><br><span class="line">│  └─ SocketException</span><br><span class="line">│</span><br><span class="line">├─ ParseException</span><br><span class="line">│</span><br><span class="line">├─ GeneralSecurityException</span><br><span class="line">│</span><br><span class="line">├─ SQLException</span><br><span class="line">│</span><br><span class="line">└─ TimeoutException</span><br></pre></td></tr></table></figure><h4 id="6-assert关键字"><a href="#6-assert关键字" class="headerlink" title="6.assert关键字"></a>6.assert关键字</h4><p>assert用来开发的时候使用，如果断言失败会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> x&gt;<span class="number">0</span>; </span><br><span class="line"><span class="keyword">assert</span> x&gt;=<span class="number">0</span> : <span class="string">&quot;x must &gt;= 0&quot;</span>;</span><br></pre></td></tr></table></figure><p>JVM默认关闭断言，开启断言需要编译时额外参数，实际上一般不用断言，都是使用JUnit。</p><h4 id="7-使用Logger日志系统代替System-out-println"><a href="#7-使用Logger日志系统代替System-out-println" class="headerlink" title="7.使用Logger日志系统代替System.out.println()"></a>7.使用Logger日志系统代替System.out.println()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Logger logger = Logger.getGlobal();</span><br><span class="line">logger.info(<span class="string">&quot;start process...&quot;</span>);</span><br><span class="line">logger.warning(<span class="string">&quot;memory is running out...&quot;</span>);</span><br><span class="line">logger.fine(<span class="string">&quot;ignored.&quot;</span>);</span><br><span class="line">logger.severe(<span class="string">&quot;process will be terminated...&quot;</span>);</span><br></pre></td></tr></table></figure><p>logger一共有七个等级</p><ul><li><p>SEVERE</p></li><li><p>WARNING</p></li><li><p>INFO</p></li><li><p>CONFIG</p></li><li><p>FINE</p></li><li><p>FINER</p></li><li><p>FINEST</p><p>Config和下面的都不会打印出来。</p></li></ul><p>实际上一般也不用，也需要额外的参数。</p><h4 id="8-日志库Commons-Logging"><a href="#8-日志库Commons-Logging" class="headerlink" title="8.日志库Commons Logging"></a>8.日志库Commons Logging</h4><p>Commons Logging定义了6个日志级别：</p><ul><li>FATAL</li><li>ERROR</li><li>WARNING</li><li>INFO</li><li>DEBUG</li><li>TRACE</li></ul><p>使用的话Log log = LogFactory.getLog(Class名);</p><h4 id="9-广泛使用的Log4j日志系统，xml配置麻烦，搭配SpringBoot应该会简单吧"><a href="#9-广泛使用的Log4j日志系统，xml配置麻烦，搭配SpringBoot应该会简单吧" class="headerlink" title="9.广泛使用的Log4j日志系统，xml配置麻烦，搭配SpringBoot应该会简单吧"></a>9.广泛使用的Log4j日志系统，xml配置麻烦，搭配SpringBoot应该会简单吧</h4><h4 id="10-和89对应的分别是SLF4J和Logback"><a href="#10-和89对应的分别是SLF4J和Logback" class="headerlink" title="10.和89对应的分别是SLF4J和Logback"></a>10.和89对应的分别是SLF4J和Logback</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;p&lt;/p&gt;
&lt;h4 id=&quot;1-异常和错误都是类，基类Throwable-只实现了序列化接口。&quot;&gt;&lt;a href=&quot;#1-异常和错误都是类，基类Throwable-只实现了序列化接口。&quot; class=&quot;headerlink&quot; title=&quot;1.异常和错误都是类，基类Thro</summary>
      
    
    
    
    
    <category term="Java" scheme="http://huajiaohuixiang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>StringBuffer和StringBuilder</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/21/StringBuffer/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/21/StringBuffer/</id>
    <published>2021-02-21T02:47:49.000Z</published>
    <updated>2021-02-21T15:12:53.609Z</updated>
    
    <content type="html"><![CDATA[<p><img src="Y:\个人博客\hexo\source\photoes\StringBuffer.png"></p><p><img src="Y:\个人博客\hexo\source\photoes\StringBuilder.png" alt="StringBuilder"></p><p>首先两者继承的类，实现的接口都是一模一样，所提供的接口也是完全相同，不同的是StringBuffer是线程安全的，StringBuilder是不安全的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;Y:\个人博客\hexo\source\photoes\StringBuffer.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;Y:\个人博客\hexo\source\photoes\StringBuilder.png&quot; alt=&quot;StringBuild</summary>
      
    
    
    
    
    <category term="Java" scheme="http://huajiaohuixiang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>内部类</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/21/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/21/%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2021-02-21T02:47:49.000Z</published>
    <updated>2021-02-21T15:10:35.584Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1376414781669409">https://www.liaoxuefeng.com/wiki/1252599548343744/1376414781669409</a></p><p>嵌套类分为三种内部类 ,匿名类，静态内部类</p><p>InnerClass和匿名类本质上相同，都需要依靠外部类才能实现，静态内部类不需要依赖外部类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/1252599548343744/1376414781669409&quot;&gt;https://www.liaoxuefeng.com/wiki/1252599548343744/1376414</summary>
      
    
    
    
    
    <category term="Java" scheme="http://huajiaohuixiang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>多态</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/21/%E5%A4%9A%E6%80%81/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/21/%E5%A4%9A%E6%80%81/</id>
    <published>2021-02-21T02:47:49.000Z</published>
    <updated>2021-02-21T14:33:08.729Z</updated>
    
    <content type="html"><![CDATA[<p>多态：对于某个类型的方法调用，实际调用的方法取决于运行时实际类型的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">p.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Person&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Class Teacher extends Person&#123; </span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Teacher&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">Person p2=<span class="keyword">new</span> Teacher();</span><br><span class="line">run(p1);</span><br><span class="line">    run(p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码分别会打印各自的run  ， 因为两者的实际类型不同，通过声明类型传值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;多态：对于某个类型的方法调用，实际调用的方法取决于运行时实际类型的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    
    <category term="Java" scheme="http://huajiaohuixiang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>枚举类</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/21/%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/21/%E6%9E%9A%E4%B8%BE%E7%B1%BB/</id>
    <published>2021-02-21T02:47:49.000Z</published>
    <updated>2021-02-21T15:10:28.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><p>我们可以使用这种方式来实现枚举类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weekday</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MON=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Tu=<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然可以实现，但是在使用的时候会出现问题，编译器不能检测出不在类中的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> day=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(day==Weekday.MON)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们用enum来实现枚举类:(编译器会将他们编译成final class Weekday extends Enum{…})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span></span>&#123;</span><br><span class="line">MON,Tue,Wed,Thur,Fri,Sat,Sun;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与enum类似的还有record类 14后才有。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;枚举类&quot;&gt;&lt;a href=&quot;#枚举类&quot; class=&quot;headerlink&quot; title=&quot;枚举类&quot;&gt;&lt;/a&gt;枚举类&lt;/h2&gt;&lt;p&gt;我们可以使用这种方式来实现枚举类：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
    <category term="Java" scheme="http://huajiaohuixiang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>模块</title>
    <link href="http://huajiaohuixiang.github.io/2021/02/21/%E6%A8%A1%E5%9D%97/"/>
    <id>http://huajiaohuixiang.github.io/2021/02/21/%E6%A8%A1%E5%9D%97/</id>
    <published>2021-02-21T02:47:49.000Z</published>
    <updated>2021-02-21T14:33:07.744Z</updated>
    
    <content type="html"><![CDATA[<p>java模块</p><p>参考资料：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281795926523938">https://www.liaoxuefeng.com/wiki/1252599548343744/1281795926523938</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;java模块&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/1252599548343744/1281795926523938&quot;&gt;https://www.liaoxuefeng.com/wiki/12525995</summary>
      
    
    
    
    
    <category term="Java" scheme="http://huajiaohuixiang.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
